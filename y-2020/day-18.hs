import qualified Data.Char as Ch

{-
Grammar: 
    Expr =   (Expr)
            | Expr + Expr
            | Expr * Expr
            | Number
-}
data Expr = Term Int | Mul Expr Expr | Plu Expr Expr | Par Expr deriving(Show)

stripStart :: String -> String
stripStart = dropWhile Ch.isSpace

parseInt :: String -> (Int, String)
parseInt "" = error "Empty String"
parseInt s = let ss = stripStart s in let intStr = takeWhile Ch.isDigit ss in (read intStr, drop (length intStr) ss)

eval :: Expr -> Int
eval (Term i) = i
eval (Mul e1 e2) = eval e1 * eval e2
eval (Plu e1 e2) = eval e1 + eval e2
eval (Par e) = eval e

removeFirstParBlock :: String -> String
removeFirstParBlock str = prefix ++ process (tail toProcess) 1
    where
        sstr = stripStart(str)
        prefix = takeWhile (/='(') sstr
        toProcess = dropWhile (/='(') sstr
        process :: String  -> Int -> String
        process s 0 = s
        process (')':ss) n = process ss (n-1)
        process ('(':ss) n = process ss (n+1)
        process (s:ss) n = process ss n
        process [] x = error "brackets don't match"

getFirstParBlock :: String -> String 
getFirstParBlock str = reverse . tail $ process (tail toProcess) [] 1
    where
        sstr = stripStart str
        toProcess = dropWhile (/='(') sstr
        process :: String -> String -> Int -> String
        process s acc 0 = acc
        process (')':ss) acc n = process ss (')':acc) (n-1)
        process ('(':ss) acc n = process ss ('(':acc) (n+1)
        process (s:ss) acc n = process ss (s:acc) n
        process [] acc x = error "brackets don't match"


parseTerm :: (String -> Expr -> (Expr, String)) -> String -> (Expr, String)
parseTerm parsOps str
    | Ch.isDigit (head(stripStart str))  = let (int, rest) = parseInt str in (Term int, rest)
    | head (stripStart str) == '(' = (Par parsedSubEq, removeFirstParBlock str)
    | otherwise = error ("String not terminal" ++ str)
    where
        sstr = stripStart str
        parStr = stripStart . getFirstParBlock $ sstr
        parsedSubTerm = parseTerm parsOps parStr
        parsedSubEq =  fst $ parseEqRec parsOps (snd parsedSubTerm) (fst parsedSubTerm)


parseOp1 :: String -> Expr -> (Expr, String)
parseOp1 str tree
    | head(stripStart str) == '+' = (Plu tree (fst parsedSubTerm), snd parsedSubTerm)
    | head(stripStart str) == '*' = (Mul tree (fst parsedSubTerm), snd parsedSubTerm)
    | otherwise = error ("String not OP" ++ str)
    where
        sstr = stripStart str
        parsedSubTerm = parseTerm parseOp1 . tail $ sstr

parseOp2 :: String -> Expr -> (Expr, String)
parseOp2 str tree
    | head(stripStart str) == '+' = case tree of
        Mul ex1 ex2 -> (Mul ex1 (Plu ex2 (fst parsedSubTerm)), snd parsedSubTerm)  -- id add + on top of *, make * top node <=> last exec
        _ -> (Plu tree (fst parsedSubTerm), snd parsedSubTerm)
    | head(stripStart str) == '*' = (Mul tree (fst parsedSubTerm), snd parsedSubTerm)
    | otherwise = error ("String not OP" ++ str)
    where
        sstr = stripStart str
        parsedSubTerm = parseTerm parseOp2 . tail $ sstr



parseEqRec :: (String -> Expr -> (Expr, String)) -> String -> Expr -> (Expr, String)
parseEqRec _ [] e = (e, "") -- might need to error out
parseEqRec parseOps str e = let subTree = parseOps str e in parseEqRec parseOps (snd subTree) (fst subTree)

parse1 :: String -> Expr
-- parse1 str = let (num, rest) = parseTerm str in parseRec1 rest (Term num) 
parse1 str = fst $ parseEqRec parseOps (snd startVal) (fst startVal)
    where
        parseOps = parseOp1
        startVal :: (Expr, String)
        startVal = parseTerm parseOps (stripStart str)


parse2 :: String -> Expr
-- parse1 str = let (num, rest) = parseTerm str in parseRec1 rest (Term num) 
parse2 str = fst $ parseEqRec parseOps (snd startVal) (fst startVal)
    where
        parseOps = parseOp2
        startVal :: (Expr, String)
        startVal = parseTerm parseOps (stripStart str)




main :: IO()
main = do
    -- print . parseTerm1 $ "    (232+4)"
    -- print . parseInt $ "   232 + 4"
    -- print . removeFirstParBlock $ "aaa + c(c (b)b + (a)a - ((())) ) + (()) + c"
    -- print . parse1 $ "1 + (2 * 3)"
    -- print . eval . parse1 $ "1 + (2 * 3)"
    -- print . parse1 $ "1 + (2 * 3) * 2"
    -- print . eval . parse1 $ "1 + (2 * 3) * 2"
    -- print . parse1 $ "1 + 2 * 3 * 2"
    -- print . eval . parse1 $ "1 + 2 * 3 * 2"
    -- print . map parse1 $ inputEq
    print . sum . map (eval . parse1) $ inputEq
    print . sum . map (eval . parse2) $ inputEq
    -- print . getFirstParBlock . head $ inputEq
    print "Hello"

inputEq :: [String]
-- inputEq = ["((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"]
inputEq = ["(6 + (9 + 4 + 8 * 2 + 3) * 6 + 8 + 4) + 3 + (6 * 5 * 2) * 6",
    "(4 + (4 * 9)) + 8 + 9",
    "(3 * 5 + (3 * 7 * 2 + 2 * 7) * (3 * 8 * 5)) * 4 * 4 + 9",
    "(7 * (5 * 7 + 9 + 5 + 6) + (8 * 3) + 6) * ((9 * 2 * 5 + 7 + 2) + 2 * 5 + 7 * 8) * 2 + (8 + 5 + 8) * 8 * 5",
    "(9 + 2 * 7 + 2 + 3 * (3 + 9 * 6 + 3 + 7 * 5)) * 6 * 8 * 2 * 9 * 8",
    "(5 * 5 + 2 * (9 * 5 * 7 + 3 * 4 * 8) * 9 + 4) + 5 * 3 * 5",
    "2 + 7 + 7",
    "7 + (7 * (2 * 9)) + 5 + 7 * 4",
    "3 + 5 + 2 * 9 + 4 * (7 * (7 + 4 * 7) * 2 * 6 * 8)",
    "6 * 8 + 9 + ((3 + 6 + 2 * 8) * 3 * 3 + 7 * (9 * 5 * 8 + 5 * 2 + 8) * 4) * 4",
    "((6 * 2 + 2 * 4) * 7 + 9 * 4 * 5 * 9) + 7 + 5 + (2 + 2 * (7 + 2 + 8 + 9 * 9))",
    "((9 + 3 * 2 + 8 + 3 * 6) * 7) * (6 * 7 * 2 * (2 * 8 + 5 + 4 * 2 + 3) + 2 + 3) + 6 + 5 + (4 * 2 + 7 + 5 * 7)",
    "(9 * 9 * 5) * ((2 * 5) + 4 * (8 + 4 * 7 * 8 + 5 * 5) + 2 + 4)",
    "5 * 9 * 9 + 3 * 5 * ((2 + 7 * 3 * 5) + (8 * 5 + 4 + 6 + 2 * 9))",
    "(8 * 4 * 6 * 8 * 7 + (2 + 4 * 3)) + 6 * 3 * 7",
    "((2 * 3 * 6 * 7) * 4 + 5) + 8 * ((3 * 4 * 4 * 5 + 8) + 7 * 9 * (4 + 5 + 9 + 8)) + ((9 * 8 + 8) * (9 + 2 + 7) * (6 + 4) + (8 * 5 * 5))",
    "(9 * 4 * 5 * 6 * 3 * 7) + 9 + 7 * 8 + 3 * 4",
    "(6 + 3 + 8 + (9 + 2 + 2)) + 3 + ((7 * 3 + 3 * 8 + 3) * 7 + (4 + 5 + 7 + 3)) * 2 * 8 * 2",
    "2 * 4 * (4 + 4 + 7 + 4 * (5 * 6 + 4 + 6 + 7) * 8) + 4 + 2 * 3",
    "2 * 9 + 7 * (7 * 2 * 6 * 6 + 6) + 8 * 7",
    "4 + 4 + (7 + 4 * (5 + 7 * 7 + 4 + 3))",
    "(4 * 9 * 5 + 7 + 5 * 3) + 7 + 9 + (3 * 4 * 7 * (5 * 4 * 4 * 4) + 8 * 6) + 6 * 4",
    "3 * (5 * 9) + 9",
    "8 + 7 * 8 * (6 * (2 * 5 + 5 * 8 * 2 + 4) + (6 * 9 * 7 + 6 * 7 + 7)) + 6",
    "6 + 9 * 6 * 4",
    "2 + (3 * 3 * 6) + 4 + 3 * (8 * (7 * 4 * 9 + 7 + 7) * (6 * 2 * 4) * 3) + 6",
    "2 + (3 * 9) + 6 * (4 + (9 + 6 + 5 + 8) * 7 * 2) * (6 * 3 * 3 + 6 + (4 + 6))",
    "7 + 8 + 5 * (6 + 8 * 2 * (3 + 3 + 5 + 3 + 4) * 6) * 4",
    "4 + 5 * 2 + ((7 * 3) * 3 + 9)",
    "9 + 5 * (5 * 7 * 7 * 7 * 4 * 6)",
    "2 * 9 * (5 * (8 + 2 + 4 * 3 * 5) + 6) * 4 * 2 * 5",
    "(8 * 9 + 7 * 4 + 4 + (5 * 6 + 7 * 6 + 3)) * (5 + 8 + 5)",
    "((6 + 2) * 5 * 4 + 8) * 4 + ((9 * 3 * 5) * (4 * 4 * 8) + (3 + 2) * 3 + (3 + 2 * 7 * 3 * 9)) * 5 * 2 + 7",
    "6 + 6 * 8 + (6 * 3) * 7 + (6 * (7 + 6))",
    "4 + (7 * 7 * 4)",
    "4 + 9 + ((2 * 4 + 4) + 7 * (2 + 5 + 3)) + 4",
    "((5 * 8 + 5 * 8 + 2) + 9) * 4 + 6 + 4 + 6 * 4",
    "(9 + (4 + 7)) * 4 * 9 + 6 * 6 * (4 + (5 + 6 + 5 * 9 + 7 * 7) * 6)",
    "2 + 9 + (5 + 7) * 9",
    "3 * 7 + 4 * (7 * 3 + 9 + (2 * 7 + 2 + 7 + 6) * (2 + 4 + 4 * 3 + 2)) + ((2 + 6) * (8 * 2 + 6))",
    "(8 * 6 * 6 * (7 * 8 + 5 + 6 + 2 + 8) * (7 * 7 + 7 * 3 * 2) + (3 * 2)) + 6 + (4 * 4 + 3 * 5)",
    "6 * (5 + (9 * 5 + 5 * 7 * 8) * 8 * 8 * (4 * 9 * 4 + 2) * 2) * 2",
    "7 + 6 + ((7 * 3 * 7 + 8 * 3) * 3 * 3 * 3)",
    "9 * 8 + (9 + 4 + 3 * 6 + (3 + 9 * 5 * 8 * 3 * 5) * (4 + 3 * 9 * 3 * 7)) + 8 * 5",
    "8 + (8 + (3 + 2 * 7 + 7) + (2 * 5 * 8 * 7)) * 6 + 6 + 6",
    "(9 + 7) + 8 + 7 * 5 * 3 * 9",
    "9 * 2 * (3 * 7 * 8) * 8 + 9 + 2",
    "3 + (8 + 8 * 7 + 4 * 4 + 5) * 5 * 2",
    "4 * (9 * 4 + 3 * (9 * 3 * 9)) * 8 * 8 * 2 + 7",
    "8 * 6 + (5 + 9 * 8 * 6) * (5 * 4 + (9 * 5)) * (3 + 8 * 3 + 9 + 9 * 8)",
    "4 * 2 * 7 + 6 + ((3 + 3 * 4 * 4) + 4) * (3 + 2 * (4 + 2 + 2 * 5) + 6 * 2 + 3)",
    "5 + 6 + (6 * 2 + 9 + 4 + 2) + 2 * 9",
    "(5 + 2 * (9 + 3 + 7 + 6 * 9 * 3) * 5 + 3 * 5) + 2",
    "7 * 6 * (6 + 3)",
    "8 + 8 + 9 * 5 * 8 * ((2 + 5 + 7 + 7 + 5 * 3) + 2 + 5)",
    "8 + 5 * 3 + 7 + 5 + (9 + 8 * 9)",
    "5 + (2 + (5 + 6 + 9) * 4 * 6 * 9 * 3) + 5",
    "8 * 6 * (5 + 7 * 5) + 4",
    "4 + 5 + (3 * 9) + 6 * 9 * (8 * 2 + 5)",
    "6 * 3 + 9 + 5 * (8 * 9 + 9 * 8 * 9 + 5)",
    "6 * 8 * (4 * 7 * 4 + 2 * 2)",
    "6 + 8 + 9 * ((5 * 7 + 9 + 2 * 5 + 8) + (4 * 5 * 3 * 4) * 3 + 4) * ((3 + 2 + 2) + 4 + 6 + 6 + 8 * 8) * ((4 * 5 * 4 + 9 * 8) + 9 + 9 + (9 + 8) + 9)",
    "7 + (5 * 2 + (5 * 4) + 4 * 4) * 8",
    "9 + (6 + 5 * 6 + 9 * (5 * 6) * 5)",
    "6 * (9 * 3 * 6) * ((7 + 2 * 7 * 2) + 2 + 9 * 7 + (3 + 3 + 4)) + ((2 + 6 * 7 * 9 + 9) + 9) + ((4 + 8 + 2 + 4) * (4 * 7 + 3 * 5) * 5 * (6 + 3 + 9 + 2 * 7) * 5) + 2",
    "(2 + 9 * 3 * 2 + 9 * 5) * 3 * 5 * 2 + (9 + 7)",
    "4 + 3 + (9 + 3 * 7 + 2 * (6 * 3))",
    "5 * 9 + (7 * 3 + (8 + 3 * 9 * 4 * 3 * 4) * 9 + 7 + 9) + 4 + 9",
    "(6 + (9 * 2) + 9) * (4 + 6 * (7 + 6)) + 9 + 7 * (7 + 8 + 9 + 8 + 5)",
    "6 + 9 * (9 + 5 * 2 + (7 * 3) * 8) + (7 * 5 * 4 * 8) + 4",
    "4 * (4 * (7 + 8 + 4 + 2 + 5 + 5) + 7 * (8 * 4 + 7 + 6 * 9 + 4)) + 6",
    "((5 * 6) + 6 + 6 * 5 * 7) + 6 * 4 * 4 + 2 + 5",
    "((2 + 8) * 7 + 8) * (6 * 7 + 5 * 6)",
    "2 + 8 + 7 + (6 + 8 + 2 + 7 * 8 + 6)",
    "6 + (7 * 5 * 7 * 2 * 3) * 7 * 2 * 6 * 9",
    "4 * ((5 + 6) + (4 + 3) + 4 * 8 + 4 + (3 * 9 + 2 + 9 * 8 * 3)) + (8 * 7 + 2) * 3",
    "9 * (9 + 8) + 8 * 3 + (5 * 9 + 7 * 4 + (3 * 7 * 7 + 3 + 4) * 5)",
    "(6 + 4 * 4) + 8 + ((4 + 4 + 6 + 2 * 4) + 3 * 6 * 9 * 2 * 3) + (5 + 8 + 7 * 8 * 6 + 2) * 2 + 2",
    "(4 * 2 + 2 + 8 * 9) + 6",
    "9 + (6 + 3 * 4 + 5) + ((2 * 9 + 2 + 3 * 7) * 5 * 9)",
    "7 * ((6 * 2 + 2 * 3 * 3 * 5) * (6 + 9) * 9 * 5) + (8 * 4 * 6 + 2 + 3 * 3)",
    "(5 * (7 + 9 + 7) * (3 * 3 + 7 + 4 * 3) * 6 + 3 + 9) * (8 * 7 + 4 * 9 + 5 * 8) + 6 * 7 + 3",
    "(7 * 9 + 7) * 7 + 7 * 9",
    "(2 + 4 + (9 + 4 * 5 + 7 + 6) * 2 + 3 + 5) + 5 + 8 + (6 + 4) + 2 + 7",
    "4 * 5 + (3 + 3 * 5) * (6 * 3)",
    "(7 * 7 * 2 * 2 + (9 * 6 + 9) * 2) * 7 * 5 + (9 * 8 + 4 + 7) * 9",
    "9 * 8 * 9 + (5 + 4 + 7 + (4 + 8 + 4) * 7 * (2 + 8 + 2 * 8)) + 8 + 7",
    "8 + 2 * (4 * (5 * 4) + 2 * 9 + 9 * 6) + 5 + 5",
    "5 + (7 + (3 * 8) + 3 + 5) * 4",
    "((8 * 8 + 4) + 3) + 2 + 5",
    "7 + 7 + 7 + 6 * (6 * 8 + 5 + 2 * 6) + (2 + 9 + (2 + 7 * 6 * 9) * 5 * (9 * 3 * 2 + 4 + 9))",
    "(2 * 5 + 2 * 3 + 2 * 5) * (6 * 4 * 6) * 4 * 7",
    "3 * 8 + 7 + 7 + 4 + (3 * 2 + 7 + 3 + 4)",
    "8 * 8 * 3 + (4 + (2 * 2 + 3 * 4 * 6 + 9) * 4 + 6) * (4 * 7 * 2)",
    "(8 + 8 * 6) + (9 + 9 * 7 + 7 * 2) + 3",
    "2 + (5 + 7 * (3 * 2 * 5) + 7 + 4) + 7 * 2 * (3 * 6) + 4",
    "3 * (9 + 6 + 6) + 8 + 6 + 6 + ((4 * 4 * 7) * 3 * (8 + 4 * 3))",
    "6 * (7 + 4 + 4 * (8 + 6 + 8) * 5) + 8",
    "4 * 3 + ((5 + 7 + 8 * 2) + 5 * (7 + 5 * 4 * 4) + (2 + 2) * 8)",
    "6 * 9 * (2 + 9 * 2 * (6 * 8 + 3) * 3 + (4 + 4 * 7 + 7)) + 6 * ((9 * 3 + 4) * 8)",
    "7 + 6 * 5 * 4",
    "4 * 7 * 3 + 9 + (7 * (6 + 9 + 3 * 5) + 2 + 6 + 5 + 6)",
    "8 * 7",
    "(5 + 7 + 8 * (6 * 6 * 5)) * 4 + 3",
    "9 + 9 * 5 + 3 + (5 + (9 + 7 * 3) * (9 + 6 + 8) * 6 * 2)",
    "5 * (7 + (6 + 9 * 7 + 4) * 9 * 5) + 8 * ((2 + 9) * 7 + 2 + 5) + 9 + 7",
    "3 * 5",
    "(3 * 8 * 3) * (9 + 6 + 3) * 4 + 2",
    "3 + (5 * 8 * 2) + (4 * 4 + 3 + 9 * 8) + (7 + 8 * 4 * (7 * 6) + 2) + (2 + 6) * 6",
    "4 + 2 + (6 + 8 + 8 + 9 * 2 + (2 * 5 * 7 + 7 * 8 + 2))",
    "2 + ((6 * 7 + 4) + (5 + 2 + 3 * 4 * 9) * 6 + 2) + 4 * 9",
    "6 + (9 * (2 + 8) + 7 + 7) * 7 * (4 * 7 + 2) * 2 + 5",
    "(7 + 7 * 6) * 4 * 9",
    "3 * 3 * ((5 + 6 * 2 * 3) * 6 + 7 * 8) * (6 + 7) + 4",
    "5 + (7 + 6) * 7 * 2 + 4",
    "((4 + 3 * 6 + 9 * 7) + 8) * 3 + (7 + 9 * 6 * 7 * 7 * 8) * 3 + (4 * (5 + 6) + 2 * (9 * 3) + 5 * 6) * 2",
    "7 + 6 + 5 + (5 * 6 + 3 + (5 + 9 * 5 * 4)) + (3 * 5)",
    "((8 + 8 + 8 * 8 + 2) * 3 * 6) * 3 + 9",
    "(6 * 4 * 9 * 9) + 3",
    "6 * ((2 * 7 * 4 + 9 + 6) + 7 + 8 * 9) * 6 * 3 + 4",
    "7 + 3 * 8 + 7 + (4 + 4 * 4 + (7 * 5 * 8) + 5 * 9)",
    "4 + 7 * 9 + (2 * (2 + 5 + 8 * 2 + 5 * 8) * 4 * 2) * 7",
    "(7 * 9 + 7 * 9 * 2 + 5) + 9 + (8 + 2 * 5 + 9 * (4 * 7 * 7 + 8 * 2 + 2) + 6) * 6 + 7 * 3",
    "6 + (9 + 6 + 3) + 5 + 9",
    "7 + 9 + 4 + (2 + (5 + 4) * 5 * 4)",
    "4 + 5 + 6 * ((6 + 3) * 8 * 5 + 9) * 2",
    "6 + (2 + 9 * (4 + 4 * 2)) * 6 + 3 * (9 * 3) + 8",
    "7 * 5 + 4 * ((3 + 4 * 4 * 6 * 4 * 6) * (7 * 9 + 2) + 6)",
    "5 + 5 * (6 * 9 + 8 + 8 + 8 + (4 * 2 + 3 + 5 + 7)) * (5 + 5 + 6 + 9) * 2",
    "4 + (7 + (3 * 5 + 9 * 8 * 7 * 9) + 7 + 4 * (9 * 4 * 6 + 8 + 6 + 9) * 5) * 9 * 3 * 3",
    "5 + ((9 * 8 + 8 + 4 * 2) + 9) + 4 * 3 + 9 * 6",
    "(6 * 3 + 6 * 2) + (7 * (3 + 2 * 3) * (9 * 4 * 2 + 7) + 6 * (6 + 9 * 9 * 5 + 4 + 9)) * 9 + 5 * 8 * 7",
    "7 + 7 * 6 * (4 + 5 * 5)",
    "9 + (7 * 8 * 2 + 4 * (2 + 3 + 5 * 5 * 8) * (2 * 8 + 3 * 3 + 3)) * 4 * ((3 + 6) + 3) + 4 + 7",
    "7 + 4 * 8 * 2 * 3 * (4 * 3 * (8 * 3) * 8)",
    "2 * (8 * 3 * (3 * 8)) * 9",
    "2 + (6 + 3 + (9 + 3 + 5 * 9 + 5 + 5) + 2 * 7) + 7 + 8 * 9 * 3",
    "((7 + 6 + 2 + 4 + 8) * 3 * 2 * 3 * 5) * 8",
    "((8 * 8 * 7 + 5) + 8 + (8 * 4 * 9 + 2 * 3 * 8) * 7 + 5 + 6) * 5 + 6",
    "3 * (5 * 7 * 2 * 9) + (9 * 7 * 7 * 4) + ((6 * 4 * 3 * 2 + 9) * 9 + 5 + 3 * (6 * 9 * 6 + 9 * 2 + 2)) * 9",
    "(3 * 3 + 2) * ((9 * 7 + 4 * 5) + 2) * 8 + 5",
    "7 * ((4 + 4 + 8 + 5 + 8) * 8 * (6 + 4 + 4 + 2 + 3)) + 6 * 8 + 9",
    "9 + 6 + (3 + 5 * 7 * (7 * 8 * 6 + 7 * 3) * (4 * 8)) + ((8 * 4 + 6 + 8 * 8 * 4) * (9 * 3 + 4 + 2) * 2)",
    "7 + 7 + 4 * 3 + (3 * 5 * 7 * 6 + (6 + 7 + 5))",
    "9 * 3",
    "3 * 6 + ((6 * 8 * 3 * 7) + 3 * 7 * 2 + 7) * 7 * 3 * 4",
    "(5 + 5 + 7) * (9 + (9 * 6 + 5 + 3 * 9 * 5) + 7 + 4 * (9 * 8)) + 5 * 7 + 9",
    "6 * (9 + 5 * 6 + 7 + (4 * 7 + 8 + 6 * 3) + 5) * 4",
    "6 + 8 * (5 * 3 + 7 + 3 + 3 * 5) * 5 + 9 * 6",
    "5 + 9 + 8 * 9 * 2 + (8 * 9)",
    "(8 * 2) * 7 * 8 * ((8 * 3) * 7 * 6 * (9 + 7 * 3 * 2)) * 4",
    "(4 * 2 * 7 * 4 * 3) * 8 + 4",
    "((9 * 3 + 9 + 2) + 9 * 3) * 2 * (6 + (8 + 7 + 7) + 7) + 8 * 3",
    "3 * (4 + 2 * (9 * 5 + 9 * 7) + (4 * 8 + 2)) * 9",
    "5 + 8 + (7 * 9 + 5 * 3 * 8) + 2",
    "8 * (5 * (6 * 9 + 7) * 2 * (2 + 6 * 7 + 7 * 2 + 6) * 5)",
    "5 + 4 * 6 + 7 * (3 + (6 * 8) + 2 + 5 * 2) * (5 * 5)",
    "(7 + (5 * 7 + 8)) * 6 * 2 + 2 * 2 * (6 * 9)",
    "((6 + 2 * 2 + 3) * 7 * 9 * 6 + 7 * (3 * 7)) + 6 + (6 * (5 * 9 + 3 + 5 + 5 * 6) * 8) * 9 + 4 * 5",
    "7 + 7 * ((9 + 3 + 5 * 6) + 3 * (2 + 6 + 4 + 5 * 2) + 2 * 8) + 9",
    "(9 * (3 * 2 + 9 + 9 + 3) + 9 * (8 + 4 * 5) + (7 + 7) * 6) + 8 * 7 + 3 + 5 * 8",
    "4 * (5 * 3 + 6 + 6) + (4 + 3 + 9 * 8) + 5 * 9",
    "(9 * 7 + 8 * (3 * 6 + 5 + 3 + 3) + (6 + 5 * 5 * 7 + 4)) * (8 * (7 + 5 + 6 + 4)) + 6 * 5",
    "(5 * (3 * 6 + 4) + (7 * 5 * 7 + 2 * 7 * 9) * 7 * 8 + 2) * 3",
    "((2 * 5 + 7 * 9 + 7 + 8) * 3 + 4 + 2) * ((4 * 7 * 2 * 6) * 7 + 6 + (8 * 5 + 9 + 4) + 9) + 7 * 7 * 9 + 3",
    "2 + 4 + 2 + (9 * 6 + 2 + 8) * 2 + 6",
    "5 + (9 + 2 * (3 * 5 * 5 * 8 + 3) + (2 * 3 * 3 * 5) + 6) * 7",
    "6 * 8 + 4 * 9 + 7 * ((8 * 5 * 8 + 9 + 4 * 4) + 5)",
    "((6 * 5 * 2 * 7) + (7 * 9 + 9 * 5 + 7)) + 2 + 5 + 7 * ((4 * 4 + 2) + 9)",
    "2 * 3 * 4",
    "5 * (5 * 9 * (7 * 2 + 4 * 5 * 4 * 8)) + 9 + 9 * 5",
    "((9 + 8 * 2) * 7) * 7 * 3 * 8",
    "7 * 9 * 3 + ((8 * 7 + 6 * 7 + 7 + 8) + (4 + 7 * 8 + 9 * 4 + 4) + 9)",
    "3 + 8 + ((8 * 6 + 4 + 9 * 6 * 4) * 8 * (9 * 9 + 3) + 3 * 3)",
    "2 * 4 * (9 + (6 * 6 * 2) + 6 + 6 + (5 * 8 * 3 * 2 + 8))",
    "9 + (7 + 3 * (8 + 9) + 6 * (4 + 8 * 2 + 2)) * 9",
    "5 * (3 + (9 + 4 * 2) * 4 * 9 + 2) + 9 * 7 + 6",
    "8 + 4 + (3 * (4 + 8 + 6 * 2 * 5 * 4) * 2 * 6) + 6 + 2 + 3",
    "(3 + 8) + 9",
    "4 * (2 * 3 + 5 * (3 * 5 * 3 * 8 + 6) + 4 * 5) * 7 + 4 * (8 * 7 * 3 + 9 * 5)",
    "5 + 2 + 3 + 5",
    "(5 + 8 * 5 * 3 * 3 * 8) * 7 + 3 + (6 * 3 * 4 * 4 * (7 + 3 * 2 + 4)) * 8 + (5 + 5 + 8 * 3 * (3 * 6))",
    "6 * (7 * (2 * 4 * 4 + 4) + 6 * (3 * 7 + 8 * 8) + 2)",
    "2 * 3 + 8 * 4 * (4 + 7) + 8",
    "6 + (9 + (8 * 2 * 7) + 6 * 9 + 5 + 9) * 6 + ((7 + 5 * 4 + 6) + 4) * (3 + 8 * 6)",
    "3 * (9 * (6 + 3 + 8) + 5 * (5 * 5 * 7) * 9) + 4",
    "(7 * 7 + 8) * ((8 + 7 * 8) + (8 * 2 + 9) + 4 * 8 * (2 * 8 + 7 + 2) + (9 + 9)) * 8 * 3",
    "(8 + 6 * 5 + 4) * 7 + 4 + (3 + 4 + 9 * 9 + 9) + 5",
    "6 * 4 * 7 * (2 * 4 + 7 + 8) + 9",
    "2 * 4 + 8 * 4 * 8",
    "7 + 7 * (2 + 2 * 6 * 8)",
    "(6 * 7 * 7 * 2 * 8) * (9 * 2 + 8 * 4 + 9 + 9) + (5 + 8) + 3 * 5 * 3",
    "3 * 7 * 2 + ((8 + 5) + 7 * 5 + (2 * 6 * 6 * 6 + 8 * 2) * 3) + 5",
    "2 + 8 * ((3 * 8 + 7 * 4 * 5) * (6 + 7 * 3 * 7))",
    "5 * (9 + 6)",
    "((5 * 4 + 9 * 8 * 5 * 4) * 3 + 4 * 8 + 6 + 8) + 7 + (3 * 6 + 9 + 6 * 3) * (7 * 4) * 5",
    "3 + 4 * 2 + 6 + 2 + (3 + 6 * (7 + 6) + 8 * 5 + 5)",
    "8 * 5 + (4 + 3 + 2 * (2 * 5) * 5 * 3) * 2",
    "2 + 8 * 4 + 6 * (9 * 6 + 4) * 2",
    "2 + (5 + 8 * 9) + 8 * 7 + (4 + 7 + 7 + 5 * 6 * 8) + (5 + (6 * 9) * 3 * 2)",
    "(5 * (2 * 6)) + 4 * (4 + (6 * 6 + 4) * 4 * 4 * 7)",
    "3 * (9 + 9 * 7 * (2 * 4 + 5 + 7) + 3 + 9)",
    "9 + 6 * (8 + (5 + 2 + 6) + 4 + 2) + 7 * 8",
    "6 * 5 * (6 + (8 + 5 * 9 * 3 * 3) * 2 * 7 * 3) * 2",
    "2 + 3 * 7 + 4 + 3",
    "((5 + 5) + 5 + 3 * 8) + 7 * 7 + 4",
    "3 + ((2 * 2 * 6) + 8 * (2 * 5 + 8)) * 8 * 3 + 8 * 6",
    "(3 * 8 + 7 * 4) * 4 + (6 * 9 + 5) * 2 + 6",
    "5 * 3 + ((9 + 4 * 5 * 9 * 7) + 7 * 7 + 4) + 5",
    "2 + 5 * 9 + 7 * ((9 + 8 + 3) + 5 * 6 * 6 * 2)",
    "(4 * (4 + 8 + 6) + 5) * 8 * 3 * 9 * 6 * 6",
    "7 * 4 + 8 + 5 * (3 + 8 + 3 * 8 + 2) * 8",
    "(5 * 5 * 2 + 3 * 4) * ((6 + 8 * 2) + 8 + 3 * 4 * 9 + 7) + 3 + 7",
    "(5 + 8 * (2 + 4) * 3) * 5",
    "9 + 2 + ((5 + 2 * 5) * 6 * 7) + (3 * 4 * 5 * 3 + 7 + 7)",
    "4 + 4 * 3 + 6 * ((7 + 8 * 2 + 7) + 7 + 8 * 2 * 9 * (6 * 7 + 3 + 2)) + 5",
    "6 * 8 + 5",
    "3 + 7 + 7 * 7 + (7 * (6 + 4 * 6 + 5 * 5 * 2) * 7 + (5 + 9 * 2 + 6))",
    "(3 + (4 + 5 * 7)) * 5",
    "(4 * (8 + 7) * 2) + 7 * 8 + 9 * 5",
    "4 * 9 * 7 + 5 + (2 * 7 + 5 + 2) + 2",
    "(9 + (9 + 8 * 9 + 4) + 6 * (9 + 8 + 7 + 2 + 4) + 6) * 4 + 4 + 5",
    "6 * 7 + 2 + 2 * 9 + ((2 + 8 * 8 + 5 * 7) * (7 * 3 + 4 + 6) * 4 * (2 * 2 * 6 + 8 + 8 + 3))",
    "(8 * 3 + 6 * 3 * 2 + 6) + 5 * 9",
    "9 + ((5 * 8 * 8 * 3 * 9 + 3) * 4) + 2 + 7",
    "(3 + 4 + 7 * 5) + 5 + 6",
    "3 + 6 + (4 + (8 + 5 + 9) * 3 * 2) + ((9 + 5 + 8 * 6 + 4) + 9 + 6 * 6) + 5 * ((7 + 2 * 2 * 8) * (5 + 7 * 6 * 9 + 4) * 6 + 7)",
    "7 + 9 * 6",
    "2 + 3 + 2 * 6 + (6 * 3 * 6 + 6 * 3 + 8) * 4",
    "3 * 7 * 9 * 4 * 9 + 4",
    "4 * (9 + (6 * 4 + 3 * 4 * 8 * 7) + 3 + 2)",
    "((5 * 4 * 8 * 9 + 6) + 9) * 3 * 9 * 3",
    "8 + 7 + 9 * (4 + 4 + (4 + 3 * 5 + 4 * 9)) * 7 * 8",
    "7 + 9 * 9 * 6 + 5",
    "6 * (4 * 9 + 7 * 3) + (5 * 9) * 6",
    "(7 + 8 * 8) + 9 + (5 + 5 * 9) * 2",
    "(8 * 6) + ((9 * 7 * 2 * 4 * 4) * 6 * 7 * 3) * 7 * (9 * 9) * 2",
    "(2 * 9) + ((3 * 8 + 3) * (3 * 9 + 3 + 3) + 5 * 3 * 5 + (5 * 7 + 2 * 7)) * 3 * (7 + 9 + 8 * 5 + 6) + (8 * (8 + 7) * 5)",
    "6 * 2 + 8 * (9 + (4 + 3 + 4 * 7 + 9) + 2) * (7 + (8 + 4 * 8 * 6 + 2) * 6 + 9 + 2) * 4",
    "(8 + 3 * (5 * 4 + 3 + 7 * 3)) + 8 * 6 + 8 + 4",
    "((8 + 9 * 5 + 5 + 3 + 6) + 6 * 4 + 7) * 9 * 5 + 9 * 2 * 4",
    "(9 * 9 + 7 * 5) * 3 * 6 + 7",
    "6 * (6 + 2 + 3 * 6 + 3)",
    "4 * (4 + (4 + 8 * 7) * 5 + 3 * 6 * 2) + 3 * 4 + 6",
    "7 * (7 * 9 * 2 * 9 * (5 * 2 * 5)) + 5",
    "((3 * 6 * 2) + 2) * (4 * 7 * 9 + 7 * 3)",
    "6 * 6 * ((3 + 6) + 5 + 5 * 4 + 7) * 5 + 7 + 8",
    "6 + (8 + 4 + (3 + 6 * 8) + 5 + 3) * 5",
    "3 * (5 * 4) * (4 + 7 * 3 * (4 + 4 + 8 * 4 + 6)) + 5",
    "7 + 7 + 4 + (3 * 2)",
    "(2 + 9) * 9 * 3 * 8",
    "8 * 6 * 2 * 7 * 8 * (7 * 6 * 4 * 9 * 6 + (2 * 3 * 5 + 5 * 4 * 4))",
    "7 + 8 * (2 + (4 * 7 * 9 * 9 + 3 + 2) + 3 * 9 + 2) * 2",
    "(3 * 4 * 5 * (5 + 6 * 2 * 4 + 7) + 8) + 4 * (7 * 6)",
    "4 * 7 * (4 + 9 * 8 * 4) + 8 * 3 * 3",
    "8 * 8 + ((5 + 7) + (6 * 7 + 4) * 4 * (9 + 6 + 8 + 5) + 6)",
    "(2 + 2 * 2 * 2 * (6 + 8 + 6) + 8) * 5",
    "3 + (9 * 6 * 9 + 8) * (6 + (4 + 9 + 5)) * 4",
    "7 + (2 * 7 + (8 * 8 + 5 * 9 + 7) * 2 * 5)",
    "8 * 8 * 9 * 8 + (3 * 9 + 9 + (6 + 2 + 4 * 5) * 2) * 2",
    "9 + 8 + (3 + 3) + (9 + 8 * (5 * 2 * 5 * 2) * 7 + 9 * (6 * 2 + 4 * 8)) + (2 * 7 + 6 * (3 + 3) * 5 * 6) + 6",
    "8 + (8 * 6 * 3 * (4 + 6 + 4 + 5 + 3) * 3) * 9 + 7",
    "5 + ((8 + 4 + 8 + 8 + 7 * 5) + (7 * 2 * 6 * 7) + 5 + 7 + (6 * 3 * 3 + 4 + 9 + 3) + (5 + 2 * 4)) + 5",
    "8 * 9 + (4 * 9 * 3) + (2 * 8 * 2 + 2 * 9 + 8) * 5",
    "9 * (6 * 5 * 7 + 8) * 7",
    "7 * 5 + 2 * (8 * 4 * 4 * (5 * 7 * 4 * 4 + 9 * 4)) * 7 * 4",
    "((7 + 2 * 5 + 4 * 7) + 6 * 3) * (9 * (4 * 5 * 4) * 6 + 2) + 2 * 5",
    "((8 + 9 * 8 + 6) + 9 + 4) * 4",
    "8 * 8 + 2 * (8 * 6 * 9) + 2 + 4",
    "8 * 5 + (5 + (2 * 7 * 5 + 3 * 8 + 6) * 8 * (3 + 2)) + 6 + 9 * 8",
    "7 + (6 + 5 + 5 + 4) * 5 + 5",
    "6 * 2",
    "5 + 2 + 4 * ((2 * 2) + 4) * ((8 * 3 + 7) * 4) + 8",
    "2 * 6 * 3 * (9 * 5) * 4",
    "(6 * 8 + 8 + 3 * (5 + 3 * 5) + 3) + 9 * 2",
    "(8 + 2) + (8 + 3) + 4 * (7 + (8 * 2)) * 2 * (7 + 4 * 7 * 3 + 8)",
    "4 * (2 * 3) * 9 * (9 * 8 + 7 + 3)",
    "8 * 5 + (6 + 2 * 2 * (9 * 5) + 4 * 3) * 6 * 9",
    "9 * 3 * 5 + 8 * 3 + ((6 * 8 + 4 * 6 + 3 + 3) + 4 + 4 * (9 + 7 * 3 * 5 + 5 + 6) + 3)",
    "7 + 4 * 7 + (2 * 8 + 8 * 8 + 4 * 9) * 9",
    "(5 * 4 + 6 + 6) * 6 + 3 * 2 * 5",
    "((9 * 2 + 4) * (6 * 2 * 2 * 2 + 2) + 5 * 3 + 2) + 7 * 7 + 9",
    "6 + 5 * 7 * 9",
    "(9 * 7 * (2 * 4 + 7 * 7 + 6) * 5) + 7",
    "(8 + 6 * 8 * 4) * 8 + (8 * (3 + 3 * 2 + 8 + 3 + 6) * 9 + 7 + 6) + 9 * 2",
    "4 * 2 * (7 * (6 * 6 * 8)) * (3 + 6 + 3)",
    "8 + 5 * 7 + 2 + 7",
    "3 + 6 * 3 * 4",
    "4 + 2 + ((7 + 7 + 5) * (8 + 7 * 3 + 3 * 9 + 5) * 3 * (6 + 7 + 7 + 5 + 5 * 3) + 2)",
    "3 * 3 * 6 + (4 + (9 * 9 + 9 * 9) * 4 * 3) * 3 * 5",
    "5 * 8 * (9 * 3 * 4 + 7 + 6) * 7 + (7 * 2 + 5 + (8 * 8 * 8))",
    "6 + (4 + 6 * 3 * (3 * 4 * 5 * 8 + 6) + 4 + 6) + 5 * (6 * (8 * 9) * (9 * 5 + 7 * 7 + 2)) * 2 * 7",
    "8 * (8 + 9 * 6) * 5 * 7 * 5 * 3",
    "((7 + 7 * 3 + 5 * 4 * 4) + 2 * (5 + 6 + 3 * 5 + 3 + 2) + 5 * 2 * 8) * 4 + 3 + 2 + (2 + 4 + 8 + 5 * (8 * 7 + 4 * 3 + 6)) * (5 * 6 * 2 * (6 * 4 * 4))",
    "9 + 6 * 6 * 9 * 7 * ((8 + 6 * 2 + 5) + (4 + 9) * 3 + 2)",
    "((8 * 7 + 9 + 2 + 3) * 3 * 5 * 5 + 9) + 2 * 6 + 9",
    "8 * 3 * (9 * (2 * 2 + 2 + 2 * 8 + 2) + 2 + 4) * (9 * 8)",
    "9 + (6 + 8 * 6 + (2 * 4)) + 4 * 5",
    "7 + (7 * 9 + 5 + 9 + (9 * 2 + 9 * 2) * 6)",
    "8 + (8 + 3 + 3 * 7 + 3 + 6) + 3 + 8 + (4 + 5 * 8 * 3)",
    "2 + 2 * 3",
    "(7 + 3) + 5 * 7 + 2 + 5",
    "9 + 2 * 2 + (3 + 8 * 2 * 4)",
    "((7 * 8 * 8 * 4) * 9) * 3",
    "(6 * 7 + 2 + 3 + 7) + (9 * 9 * 7) * 6 + 8 + 7 * (5 * 6 * 4 + (2 * 3 + 6) + (4 + 5 + 8 * 3))",
    "(2 + 3 * 4) * 4 + 8 * (7 * 6 + 2 * 5 * 2) * 7 + 5",
    "4 + 6 + ((4 * 7 + 4 * 7 + 3) + 5 * 2 * (2 * 3 + 3)) + (2 + 2) * 7 * 2",
    "8 + 8 * (9 + (2 + 9 * 8 + 2 + 9 * 5) + (5 + 3 * 8 * 5 + 9 * 3) * (9 * 8 + 9 * 8 * 7 * 8))",
    "(7 * 4 * 4) * 4",
    "5 * ((4 + 8 + 8 + 8) * 3) * 9 + (3 + 7 * 5 + 9) * 9",
    "4 + ((3 * 2 * 6 * 8 * 6) + 4 * 6 * 4 * (4 * 6 + 5 + 2)) * 7",
    "4 * (3 * 8 + 9 * 3 * 2) * 7 * 2",
    "7 + 9 + 5 * 5 + 6 + 4",
    "6 + 3 + (2 * 2) * 8 + 5 + 4",
    "7 + 9 + 6 * (8 * 4) + (6 + (5 * 7 * 4 + 8 + 8) + 8 + 8 * 8 * 3)",
    "3 * ((8 * 9 + 9 + 6 + 9 + 5) * (9 + 9 * 6 * 6 * 5 + 6) + 6) + 5 + 5 * 4",
    "8 + (4 + (4 * 4 * 9 * 5 * 3) * 7 + 9)",
    "6 * 9 * (3 + (9 * 6) * 5 * 7) + (6 * 2) * 5",
    "((7 * 5 + 5 * 3 * 6 + 3) * 9 + 3 + (3 + 2)) + 2",
    "6 + (6 * 3 + 6 + 9)",
    "5 * (8 + 8 + 4 + 8 + 7 * 8) * 3",
    "8 + 6 + 8 + (8 + 4) * 7 + 2",
    "8 * 2 * 6 * 6 + (2 * 8)",
    "8 * 9 + (3 + (6 + 9 * 3 + 8)) + 6 * 9 + 8",
    "(7 + (3 + 6) * 5 * 4 * 3) + 3 + (9 + 9 + 5 * 7 * 5 * 6) + (2 + 2 + (4 * 8 + 9 + 6 * 6 * 9)) + 5 + 9",
    "(7 * 8 * 4) * 8 * 4 * (2 + 7 * 7 + (4 + 7)) * 9 + 9",
    "5 * 8 * (7 + 2 * 9 * (3 + 7 + 9)) * 2 + 7",
    "2 + 7 + 4 + 5 * ((5 + 3 * 5) * (7 + 9 * 6 + 2 * 2)) + 7",
    "(7 + 8 * (5 * 9 * 8) + (8 * 7 + 8) + 2) + 7 + 3 + 8",
    "8 + 3 * (9 + 7 + (8 + 4 + 6 * 3)) + 9 + 5",
    "5 * 7 + 5 * 2 + 7 * 8",
    "7 * 7 + 3 * (3 + 4 + 8 + 3 * (6 + 6 * 6 * 5 * 8 + 9) + 7) * 9 + (8 * 5)",
    "6 * ((4 * 3 + 5 * 4) * 9 + 2 * (4 + 4 + 5 * 7) * 3) + (6 + 8) + ((8 + 9 * 4 + 8 * 5 + 5) + (7 * 7))",
    "4 * 2 + (4 * 8 + 7 * 2 + 5) + 5 + 2 + 8",
    "5 * (6 + 3 * 9) + 3",
    "9 + 9 + 5 * ((6 + 7 * 2 * 5 + 7 * 2) * 2)",
    "(9 + 8 + 9 * 9 * 4 * 7) * 3",
    "3 * 9 + ((9 + 5) * 7)",
    "9 * 9 + (3 + (8 * 6 * 9 + 6)) * (6 * 4 + 4 * 3) + 5 * 9",
    "8 + (8 + 2) * 3 * 3",
    "(8 * 8 + 5) + 8 * 2 + 6 + (9 * 6)",
    "(9 * (8 + 2 * 7 + 7 + 7) + (4 * 9 + 6 * 8) + 9 * 5) + 9 + 9 + 4",
    "5 * (9 * 5 + 5 + (2 * 5 * 8 * 2 * 9 + 2)) * 9 + 3",
    "((7 * 4) + (3 * 6 + 7) * 4 * (3 + 8 + 9) + 3) * 9 + 7 + 5",
    "(6 * 4 + 9 + 4 * 4) + 7 * 3 + (4 * 2 + 7 * 5 + 3)",
    "7 + (6 + 4 + 7 + 9 + 6 * 4) * 7 + 6 * 9",
    "8 * ((4 * 2 + 4 * 9) + 9 * 3 * 4 * 3 + 9) * 5",
    "8 * 8 + 7 + (9 * (5 + 9 + 5 * 5 + 7 * 5))",
    "((7 + 5 + 2) + 5 * 3) + 7 + ((6 * 2 * 5 + 7) * 3 + 2 * 8)",
    "3 + ((2 * 9 + 5) + (7 * 8 * 6) + (2 * 3) * 8 + 8) * 4 + 4 + 9",
    "2 + 6 + (3 + 3 * 6 * 6 + (6 + 4 * 6 + 7)) * 2",
    "(4 * 7 * (8 * 5) + 7 + 8 * 6) * 9 * 9 * 9",
    "7 * 2 * 7 + 8 * 5",
    "2 * (3 * 8) + ((8 + 3 + 8) * 9 * (7 * 5) + 6 * 8 * 8)",
    "(5 * 6 + 8 + 8 * (6 + 3 + 6 + 6)) * 6",
    "7 + 6 + (2 * 4 * 5 * 6 + (7 * 5 + 5 + 4 * 3 + 8) * 5)",
    "7 + 8 * 6 * ((3 + 5) * 9) + 8",
    "4 + (3 * 6 * 5 * (2 * 8 * 3)) * 4",
    "((4 + 5 * 5 + 9) + 2 + 9 * 5) * 8 + 2",
    "9 * 7 + 9 * 8 + 3 * 3",
    "7 * 7 * 9 * 5 * 2 * 4",
    "2 * (2 * 7 * (9 + 8 * 3 + 4 * 9 * 7) * 2 + 2 + 6) * 6",
    "9 * 9",
    "7 + (3 * 6 + 3 * 7 + 3) + 7",
    "3 * 4 + 9 * 6 + (6 * 6 + (3 * 4 + 8)) * 6",
    "3 + 5 + 3 + 5 + ((7 + 8 * 8 * 6 + 9 + 8) * 8 + (2 + 9 + 7) * 5 + 7) * 9",
    "2 * 4 + (9 + (9 * 4) * 4 * 3) + 7 + 9",
    "3 * 3 + (6 * 3 + 9) * 3 * (6 + 8 * 2) * 7",
    "(3 * 5 + 9 * 9) + 9 * (4 * 8 * 2 + 6 * 4 * 8) * 3 * 4",
    "6 * (3 * 2 * 8 * 3 + 6 * 7)",
    "(2 + (6 + 4 * 2 + 6 * 7) * 7) + 3 * 6 + 2 + 4 + 3",
    "2 + 6 * ((6 * 9 + 3 * 2 * 9) + (8 + 5 + 9 * 3 + 2 + 2) + 9) * 4 + 7",
    "(8 * 3 + 4 + 3) + 7 * 6 * 2 * 8 + 3",
    "9 * 6 + (6 * (2 * 8 * 4 + 9 + 6) * 8 * (4 * 4) + (9 + 5 + 9 + 6)) + (5 * 2 + 8) + (3 + 8) + 5",
    "(3 + 5 + 7 * 9 * (7 + 5 + 2 * 9 + 4 * 4)) + 8 + 3 + 5 + 6 * 9",
    "5 + 5 * ((9 + 7 * 4) * 3 * 9) + (9 * 7 * 9) + 7 + 6",
    "7 + (7 * 6) + 9 + 8 * 6 + 9",
    "2 * 4 + (4 + 2 + 7)",
    "9 + (4 * 3 + 8 * (7 + 5 + 5 + 3 * 8)) + 9 + 4 * 8",
    "6 * 8 + 7 * 5 + (6 * 7 + 7 * 6 * 8) + (4 + 6 + 3)"]